/*     Wannaku Amelia   *
*      06/10/2022       *
*         4H            *
*  record carica stampa */

#include <stdio.h>     									//libreria input output (printf, scanf)
#include <stdlib.h>                                 
/*dichiarazione funzione e costanti di tutte le utilita' generale: 
allocazione della memoria e controllo dei processi*/
#include <time.h>     									//libreria per generare numeri random
#include <string.h>
#define N 2                                           //N costante per numero di record
#define V 8
#define C 20                                           //C costante carattere del mese e per caratteri del cognome
                  
struct s_data                                         //struct data di nascita dell'alunno
{
    int giorno;
	char mese[C];                                   
	int anno;	
}typedef s_data;

struct s_alunno                                       //struct delle informazioni dell'alunno 
{
	int matricola;
	char cognome[C];
	s_data nascita;
	int voti [V];
}typedef s_alunno;

void carica(s_alunno t[]);                             //richiama la funzione di inserimento
void inserimento(s_alunno *);							//carico i dati dello studente
void stampa(s_alunno t[]);                            //stampo i dati dello studente
void media(s_alunno *);                             //stampo la media degli alunni
int TrovaVotoAlto(s_alunno t[]);                      //trovo il voto piu' alto e stampare lo studente il primo col voto piu' alto
void M_cog(s_alunno t[]);                             //convertire il primo carattere deve essere maiuscolo e le restanti in minuscolo
int ricercamatricola(s_alunno t[],int );              //ricerca la matricola chiesta dall'utente
int ricercacognome(s_alunno t[],char[]);			//ricerca cognome dell'alunno chiesta dall'utente
void ordinacognome(s_alunno t[]);					//ordina i cognomi degli studenti

int main()
{
	int r,a;
	char st[N],c;
	s_alunno tab[N];                                 //record
	srand(time(NULL));                              //i voti generati casualmente 
	carica(tab);									//carica cognomi, data di nascita e voti degli studenti
	stampa(tab);
	scanf("%c",&c);
	M_cog(tab);
	stampa(tab);									
	printf("\nPremi invio");
	scanf("%c", &c);
	ordinacognome (tab);
	stampa(tab);
	r=TrovaVotoAlto(tab);
	printf("\nLa matricola di posizione %d ha il voto piu' alto\n", r);
	printf("\nInserire numero di matricola che vuoi cercare\n");
	scanf("%d", &a);
	r=ricercamatricola(tab, a);
	printf("\nLa matricola %d si trova in posizione %d \n", a,r);
	printf("\nInserire il cognome della matricola che si vuole cercare\n");
	scanf("%s", st);
	r=ricercacognome(tab, st);
	printf("\nLa matricola %s si trova in posizione %d \n", st,r);
}

void carica(s_alunno t[])											//richiama la funzione di inserimento				
{
	for(int i=0;i<N;i++)
	{
		inserimento(&t[i]);
	}
}

void inserimento(s_alunno *t)											//carico i dati dello studente
{
	int i;
	printf("Inserisci numero matricola\n");
	scanf("%d", &t->matricola);
	printf("Inserisci cognome della matricola\n");
	scanf("%s", t->cognome);
	printf("Inserisci il giorno di nascita\n");
	scanf("%d",&t->nascita.giorno);
	printf("Inserisci i caratteri del mese di nascita\n");
	scanf("%s", t->nascita.mese);
	printf("Inserisci l'anno di nascita\n");
	scanf("%d",&t->nascita.anno);
	for(i=0;i<V;i++)
	t->voti[i]=rand()%10+1;
}


void stampa(s_alunno t[])											//stampo i dati dello studente			
{
	int i;
	for(i=0;i<N;i++)
	{
		printf("\nMatricola= %d\n", t[i].matricola);
		printf("Cognome= %s\n", t[i].cognome);
		printf("Data di nascita=%d/%s/%d\n",t[i].nascita.giorno, t[i].nascita.mese, t[i].nascita.anno);
		printf("Voti=\t");
		for(int j=0;j<V;j++)
			printf("%d\t", t[i].voti[j]);
		media(&t[i]);
	}
}

void media(s_alunno *t)													//stampo la media degli alunni			
{
	int i=0;
	float media, r;
	for(i=0;i<V;i++)
	{
		media+=t->voti[i];
	}
	r=media/V;
	printf("\nMedia: %.2f", r);
}


int TrovaVotoAlto(s_alunno t[])												//trovo il voto piu' alto e stampare lo studente il primo col voto piu' alto				
{
	int m=INT_MIN;
	int r;
	for(int i=0;i<N;i++)
	{
		for(int j=0;j<V;j++)
		{
			if(t[i].voti[j]>m)
			{
				m=t[i].voti[j];
				r=i;
			}
		}
	}
	return r;
}


void M_cog(s_alunno t[])						//convertire il primo carattere deve essere maiuscolo e le restanti in minuscolo					
{
	int i, j;
	for(i=0;i<N;i++)
	{
		if(t[i].cognome[0]>='a'&&t[i].cognome[0]<='z')
		t[i].cognome[0]-=32;
		j=1;
		while(t[i].cognome[j]!='\0')
		{
			if(t[i].cognome[j]>='A'&&t[i].cognome[j]<='Z')
			t[i].cognome[j]+=32;
			j++;
		}
	}
}	

int ricercamatricola(s_alunno t[], int x)				//cerca una matricola chiesta all'utente, se e' stato trovato restituisce indice, altrimenti -1
{
	for(int i=0;i<N;i++)
	{
		if(t[i].matricola==x)
		return i;
	}
	return -1;
}

int ricercacognome(s_alunno t[],char s[])   			//cerca un cognome chiesto all'utente, se e' stato trovato restituisce indice, altrimenti -1
{ 
 int i,r;
{ 
    for(i=0; i<N; i++)
    {
	    r=strcmp(t[i].cognome,s);
	    if(r==0)
	    return i;
	}
    return -1;
    }
}

void ordinacognome(s_alunno t[])  						//ordina cognomi degli alunni
{ int i,j,r;
s_alunno x;							  					//variabile d'appoggio
for(i=0; i<N-1; i++)
{
	for(j=0; j<N-i-1; j++)
	{
		r=strcmp(t[i].cognome,t[i+1].cognome);         //confronto tra i cognomi
		if(r==1)
		{	
		    x=t[i];
			t[i]=t[i+1];
			t[i+1]=x;
	    }
	}
}
}
