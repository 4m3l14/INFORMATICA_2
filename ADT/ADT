class ADT{
	private:
		int *p;
    	int size;
		int end; 
	public:
    	ADT(int);
		bool isFull();
		bool isEmpty();
		int GetFine();
		int GetInizio();
		int SommaElementi();
		int Trova(int);
		bool InserisciInPosizione(int, int);
		bool CancellaInPosizione(int);
};

class Coda:public ADT{
	public:
		Coda(int);
		bool InserisciCoda(int);
		bool CancellaCoda(void);
};

class Pila:public ADT{
	private:
		int numIns;
		int numCanc;
	public:
		Pila(int);
		bool InserisciPila(int);
		bool CancellaPila(void);
};


#include<iostream>
#include "ADT1.h"
#include<stdlib.h>

using namespace std;

ADT::ADT(int dim){ 
	size=dim;     
	p=new int [size];
	end=-1;}

bool ADT::isFull(){
		return (end==size-1);}

bool ADT::isEmpty(){
		return (end==-1);}
	
int ADT::GetFine(){
	if(isEmpty()){
		return -1;}
		else{
		return p[end];}

int ADT::GetInizio(){
		if(isEmpty()){
		return -1;}
		else{
		return p[0];}}


int ADT::Trova(int x){
if(!isEmpty()){
	int cont=0;
	int *v;
	for(v=p;v-p<end;v++){
		if(p[v]==x)
			cont++;}}
	return cont;	
	else{
	return -1;}
}

int ADT::SommaElementi(){
	int somma=0;
	int *v;
	for(v=p;v-p<end;v++){
		somma+=p[v];}
	return somma;
}

bool ADT::InserisciInPosizione(int elem, int indice){
	if(!isFull()){
	if(isEmpty()){
	end=0;
	p[end]==elem;}
	for(int i=end; i>indice;i--){
	p[i+1]=p[i];}
	p[indice]=elem;
	return true;}
	
	}		
}
bool ADT::CancellaInPosizione(int indice){
	
	if(isEmpty()){
		return false;
	}
	for(int i=0;i<end;i++)
		p[i]=p[i+1];
	end--;
	return true;		
}
Coda(int x):ADT{
	first-1;
}
bool InserisciCoda(int):ADT{
	if(isEmpty())
	if(isEmpty()){
		
	}
}
		


